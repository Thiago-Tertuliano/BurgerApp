name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          
      - name: Download dependencies
        run: |
          cd backend-hamburgueria
          go mod download
          go mod tidy
          
      - name: Run tests
        run: |
          cd backend-hamburgueria
          go test -v ./...
          
      - name: Build backend
        run: |
          cd backend-hamburgueria
          go build -o burgerapp-backend

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: projeto-hamburgueria/package-lock.json
          
      - name: Install dependencies
        run: |
          cd projeto-hamburgueria
          npm ci
          
      - name: Run tests
        run: |
          cd projeto-hamburgueria
          npm run test
          
      - name: Build frontend
        run: |
          cd projeto-hamburgueria
          npm run build

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: burgerapp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          
      - name: Run integration tests
        run: |
          cd backend-hamburgueria
          go test -v -tags=integration ./...

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker images
        run: |
          docker build -t ghcr.io/${{ github.repository }}/backend:latest --target backend-build .
          docker build -t ghcr.io/${{ github.repository }}/frontend:latest --target frontend-build .
          docker push ghcr.io/${{ github.repository }}/backend:latest
          docker push ghcr.io/${{ github.repository }}/frontend:latest

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Deploy to staging
        run: echo "Deploy to staging environment"
        # Adicionar steps de deploy real aqui

  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: echo "Deploy to production environment"
        # Adicionar steps de deploy real aqui

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  code-quality:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: projeto-hamburgueria/package-lock.json
          
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          
      - name: Run ESLint (Frontend)
        run: |
          cd projeto-hamburgueria
          npm ci
          npm run lint
          
      - name: Run Go vet and gofmt (Backend)
        run: |
          cd backend-hamburgueria
          go vet ./...
          test -z "$(gofmt -l .)"